import { useCallback, useRef, useMemo, useState } from "react";
import Head from "next/head";
import Image from "next/image";
import { Formik } from "formik";
import { Element, scroller } from "react-scroll";
import cn from "classnames";
import axios from "axios";
import * as yup from "yup";
import { getToken } from "../lib/csrf";

import classes from "./index.module.css";

const validationSchema = yup.object().shape({
  email: yup
    .string()
    .email("Пожалуйста, укажите правильный адрес электронной почты")
    .required("Пожалуйста, укажите адрес электронной почты"),
});

/**
 *
 * @param {Object} props
 * @param {String} props.csrf
 * @returns {React.Component}
 */
export default function Home({ csrf }) {
  const emailFieldRef = useRef();

  const initialOrderValues = useMemo(
    () => ({
      csrf,
      email: "",
    }),
    [csrf]
  );

  const [orderState, setOrderState] = useState("initial");

  const onItemBuyClicked = useCallback(() => {
    scroller.scrollTo("orderContainer", {
      duration: 200,
      smooth: true,
      isDynamic: true,
    });
    emailFieldRef.current?.focus();
  }, [emailFieldRef]);

  return (
    <div className={classes.container}>
      <Head>
        <title>Dark Side — жидкости для электронных испарителей</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className={classes.catalogContainer}>
        <header className={classes.descriptionHeader}>
          жидкости для электронных испарителей
        </header>
        <header className={classes.logoHeader}>dark side of the moon</header>
        <section className={classes.itemsContainer}>
          <section className={classes.itemContainer}>
            <div className={classes.itemContainerWrapper}>
              <div className={classes.itemImageWrapper}>
                <Image
                  src="/images/items/asteroid/item-asteroid_h7wtml_c_scale,w_200.png"
                  layout="fill"
                  objectFit="contain"
                  alt="Asteroid"
                />
              </div>
              <div className={classes.itemHeaderWrapper}>
                <header className={cn(classes.itemHeader, classes.asteroid)}>
                  asteroid
                </header>
              </div>
              <div className={classes.itemCapacity}>60 / 100 ml</div>
              <div className={classes.itemDescription}>
                Густой насыщенный вкус сливочного мороженого с&nbsp;дробленым
                миндалем и&nbsp;фисташкой под кленовым сиропом
              </div>
            </div>
            <div className={classes.itemButtonWrapper}>
              <button
                className={cn(classes.itemButton, classes.asteroid)}
                onClick={onItemBuyClicked}
              >
                купить
              </button>
            </div>
          </section>
          <section className={classes.itemContainer}>
            <div className={classes.itemContainerWrapper}>
              <div className={classes.itemImageWrapper}>
                <Image
                  src="/images/items/orbit/orbit_x5nsrq_c_scale,w_200.png"
                  layout="fill"
                  objectFit="contain"
                  alt="Around the Orbit"
                />
              </div>
              <div className={classes.itemHeaderWrapper}>
                <header className={cn(classes.itemHeader, classes.orbit)}>
                  around the orbit
                </header>
              </div>
              <div className={classes.itemCapacity}>60 / 100 ml</div>
              <div className={classes.itemDescription}>
                Нежный ароматный вкус натурального клубничного компота утолит
                жажду вкусовых рецепторов и&nbsp;освежит воспоминания
                о&nbsp;ярких солнечных днях, проведенных в&nbsp;деревне
              </div>
            </div>
            <div className={classes.itemButtonWrapper}>
              <button
                className={cn(classes.itemButton, classes.orbit)}
                onClick={onItemBuyClicked}
              >
                купить
              </button>
            </div>
          </section>
          <section className={classes.itemContainer}>
            <div className={classes.itemContainerWrapper}>
              <div className={classes.itemImageWrapper}>
                <Image
                  src="/images/items/jam/jam_o32jgj_c_scale,w_200.png"
                  layout="fill"
                  objectFit="contain"
                  alt="Space Jam"
                />
              </div>
              <div className={classes.itemHeaderWrapper}>
                <header className={cn(classes.itemHeader, classes.jam)}>
                  space jam
                </header>
              </div>
              <div className={classes.itemCapacity}>60 / 100 ml</div>
              <div className={classes.itemDescription}>
                Космическое сочетание вкусов раскрывается в&nbsp;деталях
                мармеладных оттенков прохладного космического джема&nbsp;&mdash;
                если мармелад, то&nbsp;только космический
              </div>
            </div>
            <div className={classes.itemButtonWrapper}>
              <button
                className={cn(classes.itemButton, classes.jam)}
                onClick={onItemBuyClicked}
              >
                купить
              </button>
            </div>
          </section>
          <section className={classes.itemContainer}>
            <div className={classes.itemContainerWrapper}>
              <div className={classes.itemImageWrapper}>
                <Image
                  src="/images/items/dreams/dreams_e4tfrc_c_scale,w_200.png"
                  layout="fill"
                  objectFit="contain"
                  alt="Moon Dreams"
                />
              </div>
              <div className={classes.itemHeaderWrapper}>
                <header className={cn(classes.itemHeader, classes.dreams)}>
                  moon dreams
                </header>
              </div>
              <div className={classes.itemCapacity}>60 / 100 ml</div>
              <div className={classes.itemDescription}>
                Мягкий ненавязчивый вкус домашнего овсяного печенья раскрывается
                в&nbsp;легких оттенках свежевыпеченного печенья
                и&nbsp;послевкусии овсяных хлопьев
              </div>
            </div>
            <div className={classes.itemButtonWrapper}>
              <button
                className={cn(classes.itemButton, classes.dreams)}
                onClick={onItemBuyClicked}
              >
                купить
              </button>
            </div>
          </section>
          <section className={classes.itemContainer}>
            <div className={classes.itemContainerWrapper}>
              <div className={classes.itemImageWrapper}>
                <Image
                  src="/images/items/gravity/gravity_zbngh9_c_scale,w_200.png"
                  layout="fill"
                  objectFit="contain"
                  alt="Zero Gravity"
                />
              </div>
              <div className={classes.itemHeaderWrapper}>
                <header className={cn(classes.itemHeader, classes.gravity)}>
                  zero gravity
                </header>
              </div>
              <div className={classes.itemCapacity}>60 / 100 ml</div>
              <div className={classes.itemDescription}>
                Аромат классической жевательной резинки раскрывается
                в&nbsp;многогранном вкусе с&nbsp;множеством оттенков
                и&nbsp;уносит в&nbsp;космос, где нет гравитации
              </div>
            </div>
            <div className={classes.itemButtonWrapper}>
              <button
                className={cn(classes.itemButton, classes.gravity)}
                onClick={onItemBuyClicked}
              >
                купить
              </button>
            </div>
          </section>
        </section>
      </section>
      <Element name="orderContainer">
        <section className={classes.orderContainer}>
          <div className={classes.orderFormWrapper}>
            {orderState === "initial" ? (
              <>
                <div className={classes.orderFormHeading}>
                  Просто оставьте нам свою почту
                </div>
                <Formik
                  initialValues={initialOrderValues}
                  validationSchema={validationSchema}
                  onSubmit={async (data) => {
                    await axios.post("/api/order", data);
                    setOrderState("comlete");
                  }}
                >
                  {(props) => (
                    <form
                      onSubmit={props.handleSubmit}
                      action="/api/order"
                      method="post"
                      className={classes.orderForm}
                    >
                      <input
                        className={cn(
                          classes.orderFormControl,
                          classes.orderFormInput
                        )}
                        type="text"
                        name="email"
                        placeholder="Адрес электронной почты"
                        ref={emailFieldRef}
                        onChange={props.handleChange}
                        onBlur={props.handleBlur}
                        value={props.values.email}
                      />
                      {props.errors.email && props.touched.email ? (
                        <div className={classes.orderFormError}>
                          {props.errors.email}
                        </div>
                      ) : null}
                      <input
                        type="hidden"
                        name="_csrf"
                        value={props.values.csrf}
                      />
                      <button
                        className={cn(
                          classes.orderFormControl,
                          classes.orderFormButton
                        )}
                        disabled={props.isSubmitting}
                      >
                        отправить
                      </button>
                    </form>
                  )}
                </Formik>
                <div className={classes.orderFormHeading}>или позвоните</div>
                <div className={classes.orderFormPhone}>+7 926 385 37-51</div>
              </>
            ) : (
              <>
                <div className={cn(classes.orderFormHeading, classes.noMargin)}>
                  Спасибо! Мы скоро свяжемся с вами.
                </div>
              </>
            )}
          </div>
        </section>
      </Element>
    </div>
  );
}

export function getServerSideProps() {
  return {
    props: {
      csrf: getToken(),
    },
  };
}
